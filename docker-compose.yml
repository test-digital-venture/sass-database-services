services:
  postgres:
    restart: always
    container_name: postgres
    image: postgres:16
    networks:
      - shared_network
    # env_file: ./.env
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${BASE_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${BASE_PASSWORD}
    volumes:
      - ${DATA_DIR}/pgdata:/var/lib/postgresql/data
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    networks:
      - shared_network
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  redis:
    image: redis:6.2
    container_name: redis
    restart: always
    networks:
      - shared_network
    ports:
      - 6379:6379  # Use 6379 inside container
    # command: ["redis-server", "--requirepass", "${BASE_PASSWORD}"]
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    networks:
      - shared_network
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${BASE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${BASE_PASSWORD}
    volumes:
      - ${DATA_DIR}/mongo:/data/db
  # mysql
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    networks:
      - shared_network
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${BASE_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${BASE_USER}
      MYSQL_PASSWORD: ${BASE_PASSWORD}
    volumes:
      - ${DATA_DIR}/mysql:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
  #ElasticSearch
  elasticsearch:
    image: elasticsearch:8.0.0
    container_name: elasticsearch
    restart: always
    networks:
      - shared_network
    ports:
      - 9200:9200
    environment:
      ELASTICSEARCH_USERNAME: ${BASE_USER}
      ELASTICSEARCH_PASSWORD: ${BASE_PASSWORD}
      # Disable security features for development
      discovery.type: single-node
      xpack.security.enabled: false
    volumes:
      - ${DATA_DIR}/elasticsearch:/usr/share/elasticsearch/data
  # TiDb
  tidb:
    image: pingcap/tidb
    container_name: tidb
    restart: always
    networks:
      - shared_network
    ports:
      - 4000:4000
      - 10080:10080
    # environment:
    #   - MYSQL_ROOT_PASSWORD=${BASE_PASSWORD}
    #   - MYSQL_USER=${BASE_USER}
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    networks:
      - shared_network
    ports:
      - 8080:8080
  minio-s3:
    image: quay.io/minio/minio
    container_name: minio-s3
    restart: always
    networks:
      - shared_network
    ports:
      - 9090:9000  # API port: host:container
      - 9091:9001  # Console port: host:container
    environment:
      MINIO_ROOT_USER: ${BASE_USER}
      MINIO_ROOT_PASSWORD: ${BASE_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ${DATA_DIR}/minio:/data
    
# Removed separate minio-console since it's now integrated with minio-s3 on port 9001
  minio-client:
    image: quay.io/minio/mc
    container_name: minio-client
    restart: always
    networks:
      - shared_network
    entrypoint: >
      sh -c "mc alias set myminio http://minio-s3:9000 ${BASE_USER} ${BASE_PASSWORD} &&
             mc mb myminio/mybucket &&
             mc policy set public myminio/mybucket &&
             tail -f /dev/null"
    depends_on:
      - minio-s3
    environment:
      MINIO_ROOT_USER: ${BASE_USER}
      MINIO_ROOT_PASSWORD: ${BASE_PASSWORD}
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    networks:
      - shared_network
    ports:
      - 80:80
      - 443:443

volumes:
  portainer_data:
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local
networks:
  shared_network:
    external: true